{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","checkIfPlainTypeEnabled","checkIfGradientTypeEnabled","setState","appClass","bgStyle","prepareGradientStyleSheets","checkIfImageTypeEnabled","prepareBackgroundImageStyle","checkIfNightModeEnabled","state","backgroundType","checkIfDayModeEnabled","Configs","gradientColors","background","backgroundSize","backgroundImageUrl","getDefaultModeBasedOnBackgroundType","lightBackgroundModes","darkBackgroundModes","changeThemeMode","e","backgroundIndex","backgroundMode","changeBackgroundBasedonMode","length","plainBackgroundMode","devIntro","devDesc","icons","_this$state","react_default","a","createElement","className","style","onClick","Typist_default","map","icon","target","rel","href","concat","url","image","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1327b14c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Typist from 'react-typist';\r\nimport './App.css';\r\nimport Configs from './configurations.json';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      darkBackgroundModes: [\r\n        'day',\r\n        'terminal',\r\n        'torquoise',\r\n        'alizarin',\r\n        'amythyst',\r\n        'carrot',\r\n        'peterriver'\r\n      ],\r\n      lightBackgroundModes: [\r\n        'night',\r\n        'lightred',\r\n        'lightpurple',\r\n        'lightgreen',\r\n        'lightblue',\r\n        'lightyellow'\r\n      ],\r\n      backgroundType: Configs.backgroundType || 'plain',\r\n      appClass: Configs.plainBackgroundMode || 'daylight',\r\n      devIntro: Configs.devIntro || 'Lorem Ipsum',\r\n      devDesc:\r\n        Configs.devDesc ||\r\n        'Aute veniam ut deserunt cillum irure pariatur Lorem dolore anim nostrud quis veniam elit culpa.',\r\n      backgroundMode: 'default',\r\n      backgroundIndex: 0,\r\n      bgStyle: {},\r\n      icons: Configs.icons || []\r\n    };\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    if (this.checkIfPlainTypeEnabled()) {\r\n      return true;\r\n    } else if (this.checkIfGradientTypeEnabled()) {\r\n      this.setState({\r\n        appClass: 'gradient',\r\n        bgStyle: this.prepareGradientStyleSheets()\r\n      });\r\n    } else if (this.checkIfImageTypeEnabled()) {\r\n      this.setState({\r\n        appClass: 'full-bg-image',\r\n        bgStyle: this.prepareBackgroundImageStyle()\r\n      });\r\n    }\r\n  };\r\n\r\n  checkIfNightModeEnabled = () => {\r\n    return (\r\n      this.state.backgroundType === 'plain' &&\r\n      this.state.appClass === 'nightlight'\r\n    );\r\n  };\r\n\r\n  checkIfDayModeEnabled = () => {\r\n    return (\r\n      this.state.backgroundType === 'plain' &&\r\n      this.state.appClass === 'daylight'\r\n    );\r\n  };\r\n\r\n  checkIfGradientTypeEnabled = () => {\r\n    return this.state.backgroundType === 'gradient';\r\n  };\r\n\r\n  checkIfPlainTypeEnabled = () => {\r\n    return this.state.backgroundType === 'plain';\r\n  };\r\n\r\n  checkIfImageTypeEnabled = () => {\r\n    return this.state.backgroundType === 'image';\r\n  };\r\n\r\n  prepareGradientStyleSheets = () => {\r\n    if (Configs.gradientColors) {\r\n      return {\r\n        background: 'linear-gradient(-45deg, ' + Configs.gradientColors + ')',\r\n        backgroundSize: '400% 400%'\r\n      };\r\n    } else {\r\n      return {\r\n        background:\r\n          'linear-gradient(-45deg, #EE7752, #E73C7E, #23A6D5, #23D5AB)',\r\n        backgroundSize: '400% 400%'\r\n      };\r\n    }\r\n  };\r\n\r\n  prepareBackgroundImageStyle = () => {\r\n    if (Configs.backgroundImageUrl) {\r\n      return {\r\n        background:\r\n          'url(\"' +\r\n          Configs.backgroundImageUrl +\r\n          '\") no-repeat center center fixed',\r\n        backgroundSize: 'cover'\r\n      };\r\n    } else {\r\n      return {\r\n        background:\r\n          'url(\"/images/sample-background.jpg\") no-repeat center center fixed',\r\n        backgroundSize: 'cover'\r\n      };\r\n    }\r\n  };\r\n\r\n  getDefaultModeBasedOnBackgroundType = () => {\r\n    if (this.checkIfNightModeEnabled()) {\r\n      return this.state.lightBackgroundModes[0];\r\n    } else if (this.checkIfDayModeEnabled()) {\r\n      return this.state.darkBackgroundModes[0];\r\n    }\r\n  };\r\n\r\n  changeThemeMode = e => {\r\n    if (this.checkIfNightModeEnabled()) {\r\n      this.setState({\r\n        appClass: 'daylight',\r\n        backgroundIndex: 0,\r\n        backgroundMode: this.state.darkBackgroundModes[0]\r\n      });\r\n    } else if (this.checkIfDayModeEnabled()) {\r\n      this.setState({\r\n        appClass: 'nightlight',\r\n        backgroundIndex: 0,\r\n        backgroundMode: this.state.lightBackgroundModes[0]\r\n      });\r\n    }\r\n  };\r\n\r\n  changeBackgroundBasedonMode = () => {\r\n    if (\r\n      this.checkIfNightModeEnabled() &&\r\n      this.state.backgroundIndex < this.state.lightBackgroundModes.length - 1\r\n    ) {\r\n      this.setState({\r\n        backgroundIndex: this.state.backgroundIndex + 1,\r\n        backgroundMode: this.state.lightBackgroundModes[\r\n          this.state.backgroundIndex + 1\r\n        ]\r\n      });\r\n    } else if (\r\n      this.checkIfDayModeEnabled() &&\r\n      this.state.backgroundIndex < this.state.darkBackgroundModes.length - 1\r\n    ) {\r\n      this.setState({\r\n        backgroundIndex: this.state.backgroundIndex + 1,\r\n        backgroundMode: this.state.darkBackgroundModes[\r\n          this.state.backgroundIndex + 1\r\n        ]\r\n      });\r\n    } else {\r\n      this.setState({\r\n        backgroundIndex: 0,\r\n        backgroundMode: this.getDefaultModeBasedOnBackgroundType()\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      appClass, bgStyle, backgroundMode, devIntro, devDesc, icons\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className={ appClass } style={ bgStyle }>\r\n        <div className=\"change-mode\" onClick={this.changeThemeMode} />\r\n        <div\r\n          className={ backgroundMode }\r\n          onClick={this.changeBackgroundBasedonMode}>\r\n          <main className=\"App-main\">\r\n            <h1 className=\"intro\">{ devIntro }</h1>\r\n            <div className=\"tagline\">\r\n              <Typist>{ devDesc }</Typist>\r\n            </div>\r\n            <div className=\"icons-social\">\r\n              {icons.map(icon => (\r\n                <a\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  href={ `${icon.url}` }\r\n                >\r\n                  <i className={ `fab ${icon.image}` } />\r\n                </a>\r\n              ))}\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}